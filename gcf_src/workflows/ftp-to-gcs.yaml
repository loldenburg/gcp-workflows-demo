# runs an import from an FTP server to a GCS bucket and then triggers a callback to a Pub/Sub topic
main:
  params: [ input ]
  steps:
    - log_initial_payload:
        call: sys.log
        args:
          severity: "INFO"
          text: ${"Starting FTP to GCS Workflow with payload " + json.encode_to_string(input)}
    - set_core_vars: # need those here to access them as global vars in sub-workflows
        assign:
          - attempt: 1 # workflow will restart itself up to {max_attempts} attempts
          - max_attempts: ${default(map.get(input, "max_attempts"), 3)}
          - import_script_name: "ftp_to_gcs" # identifies the script to be run by the cloud function we will trigger
          - next_pubsub_payloads: ${default(map.get(input, "next_pubsub_payloads"), null)} # list of objects with next pubsub payloads to trigger - OPTIONAL, defaults to null => workflow will end after import
          - import_cfg: ${input["import_cfg"]} # import config - MANDATORY
    - set_fallback_cfg_vars:
        assign: # if variables are not provided in the input payload, we will use these fallback values:
          - fallback_cfg: # this is the payload we will send to the cloud function via the Pubsub message
              callback_timeout: ${default(map.get(import_cfg, "callback_timeout"), 540)} # timeout for callback (=for waiting for import cloud function result) - OPTIONAL, defaults to 540 seconds
              encoding: ${default(map.get(import_cfg, "encoding"), "utf-8")} # encoding of the file to import (eg. "utf-8") - OPTIONAL, defaults to "utf-8"
              ftp_timeout: ${default(map.get(import_cfg, "ftp_timeout"), null)} # timeout for FTP - OPTIONAL, defaults to null (default FTP lib timeout setting will be used)
              gcs_bucket: ${default(map.get(import_cfg, "gcs_bucket"), null)}  # GCS bucket to import to - OPTIONAL, defaults to default bucket in Cloud Function
              gcs_file_name: ${default(map.get(import_cfg, "gcs_file_name"), null)} # GCS file name to import to (eg. "prods_20230909-100000.txt") - OPTIONAL, defaults to source file name
              gcs_folders: ${default(map.get(import_cfg, "gcs_folders"), null)} # list GCS folder(s) to import to (eg. ["product-classifications-as-from-export-tool"]) - MANDATORY
              script: ${import_script_name} # identifies the script to be run by the cloud function we will trigger
              source_file_name: ${default(map.get(import_cfg, "source_file_name"), null)} # for single-file import mandatory if source_file_name_re is not provided
              source_file_name_re: ${default(map.get(import_cfg, "source_file_name_re"), null)} # regex, will do the import for multiple files, mandatory if source_file_name is not provided
              source_folder: ${default(map.get(import_cfg, "source_folder"), "/")} # FTP folder to import from (eg. "outgoing") - OPTIONAL, defaults to FTP's default folder
              keep_file_on_ftp: ${default(map.get(import_cfg, "keep_file_on_ftp"), true)} # if false, will delete the file(s) after import - OPTIONAL, defaults to false
              add_fin_file: ${default(map.get(import_cfg, "add_fin_file"), false)} # if true, will add a .fin file after import - OPTIONAL, defaults to false
    - merge_fallback_cfg_into_import_cfg:
        assign:
          - import_cfg: ${map.merge(input["import_cfg"], fallback_cfg)}
    - retry_or_exit_loop:
        switch:
          - condition: ${attempt > max_attempts}
            raise: ${"Workflow error - Max attempts of " + max_attempts + " reached, exiting workflow"}
    - log_enriched_payload:
        call: sys.log
        args:
          severity: "INFO"
          text: ${"Starting attempt " + attempt + " of max " + max_attempts + " to import from FTP to GCS with import_cfg -> " + json.encode_to_string(import_cfg)}
    - create_callback_url:
        call: events.create_callback_endpoint
        args:
          http_callback_method: "POST"
        result: callback_details
    - call_pubsub_publisher:
        call: pubsub_publisher
        args:
          msg: ${import_cfg}
          callback_url: ${callback_details.url}
          topic: "analytical-scripts"
    - call_callback_handler:
        call: callback_handler
        args:
          _callback_details: ${callback_details}
          callback_timeout: ${import_cfg["callback_timeout"]} # wait max x seconds (Cloud Function should be done by then)
          attempt: ${attempt}
        result: callback_result
    - log_callback_result:
        call: sys.log
        args:
          severity: "DEBUG"
          text: ${"Callback result is " + json.encode_to_string(callback_result)}
    - set_callback_payload_to_http_body:
        switch: # if the callback result is from an actual http request body, and not just a timeout error, we will use the body as the callback response
          - condition: ${default(map.get(callback_result, "http_request"), null) != null}
            assign:
              - callback_payload: ${default(map.get(callback_result.http_request, "body"), null)}
              - workflow_instructions: ${default(map.get(callback_payload, "workflow_instructions"), null)}
    - decide_next_step_based_on_callback_payload:
        switch:
          # if callback payload contains a "result" property with value = "error", it failed => we will retry if we haven't reached max_attempts yet:
          - condition: ${callback_payload["result"] == "error"}
            next: increment_and_loop_again
          # successfully completed import:
          - condition: ${callback_payload["result"] == "done"}
            next: trigger_next_pubsub_message
          # else = no error, we will check if we have instructions to retry or exit
          - condition: ${default(map.get(workflow_instructions, "exit"), false) == true}
            next: exit_workflow
          - condition: ${default(map.get(workflow_instructions, "retry"), false) == true}
            next: increment_and_loop_again
        next: exit_workflow # default next step (if no explicit success message or retry instructions, we stop to avoid a potential chain of tragedy)
    - increment_and_loop_again:
        steps:
          - increment_attempts:
              assign:
                - attempt: ${attempt + 1}
          - wait_before_retry:
              call: sys.sleep
              args:
                seconds: 30
              next: retry_or_exit_loop
    - trigger_next_pubsub_message:
        switch:
          - condition: ${next_pubsub_payloads != null}
            steps:
              - loop_over_next_pubsub_payloads:
                  for:
                    value: next_pubsub_payload
                    in: ${next_pubsub_payloads}
                    steps:
                      - log_next_pubsub_payload:
                          call: sys.log
                          args:
                            severity: "INFO"
                            text: ${"Import from FTP to GCS was successful. Triggering next Pub/Sub message with payload " + json.encode_to_string(next_pubsub_payload)}
                      - trigger_pubsub:
                          call: pubsub_publisher
                          args:
                            msg: ${next_pubsub_payload}
                            callback_url: null # we don't want to wait for a callback anymore
                            topic: "analytical-scripts"
    - exit_workflow:
        steps:
          - create_exit_data:
              assign:
                - exit_data:
                    msg: "Finished FTP to GCS import workflow"
                    callback_payload: ${callback_payload}
          - return_exit_data:
              return: ${exit_data}

pubsub_publisher:
  params: [ msg, callback_url, topic ]
  steps:
    - enrich_msg:
        assign:
          - msg["workflow_callback_url"]: ${callback_url} # add the callback URL to the message
          - project: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
          - topic: ${topic}
          - message: ${json.encode(msg)}
          - base64Msg: ${base64.encode(message)}
    - log_pubsub_message:
        call: sys.log
        args:
          severity: "INFO"
          text: ${"Publishing Pub/Sub message " + json.encode_to_string(msg) + " to topic " + topic + " in project " + project}
    - publish_message_to_pubsub:
        call: googleapis.pubsub.v1.projects.topics.publish
        args:
          topic: ${"projects/" + project + "/topics/" + topic}
          body:
            messages:
              - data: ${base64Msg}
        result: publish_result
    - log_publish_result:
        call: sys.log
        args:
          severity: "INFO"
          text: ${"Publish result is " + json.encode_to_string(publish_result)}
    - return_result:
        return: ${publish_result}



callback_handler:
  params: [ _callback_details, callback_timeout, attempt ]
  steps:
    - log_callback_details:
        call: sys.log
        args:
          severity: "INFO"
          text: ${"Listening for callbacks on " + _callback_details.url +" with callback_timeout " + callback_timeout + " and attempt " + attempt}
    - await_callback:
        try:
          call: events.await_callback
          args:
            callback: ${_callback_details}
            timeout: ${callback_timeout}
          result: callback_result
        except: # error handling, usually error = callback_timeout
          as: e
          steps:
            - log_error:
                call: sys.log
                args:
                  severity: "WARNING"
                  text: ${"Error during attempt " + attempt + " while waiting for callback - " + e.message}
            - increment_attempts:
                assign: # create fake callback response with error message
                  - callback_result:
                      result: "error"
                      result_detail: ${e.message}
            - return_waiting_error:
                return: ${callback_result} # try to re-run the same script again up to n times, but with a new callback URL
    - print_callback_result:
        call: sys.log
        args:
          severity: "INFO"
          text: ${"Got callback after attempt " + attempt + ". Callback payload is " + json.encode_to_string(callback_result.http_request.body)}
    - return_callback_result:
        return: ${callback_result}